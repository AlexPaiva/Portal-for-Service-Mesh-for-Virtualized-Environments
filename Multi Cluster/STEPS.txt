0)-Criar Cluster do Portal 'Main' (Único que vai ter o ISTIO tho)
0.1) No terminal dar CD para o diretorio do 'Cluster_1'
0.2) Deploy do Cluster KIND usando o comando abaixo:
kind create cluster --config kind-config-portal.yaml --name portal-cluster
0.3) Deploy do ISTIO (Garantindo que têm ISTIO instalado e bem configurado (no PATH)):
kubectl config use-context kind-portal-cluster
istioctl install --set profile=demo -y
0.4) Dar enable ao sidecar injection do ISTIO:
kubectl label namespace default istio-injection=enabled
0.5) Contruír a imagem do docker (DAR CD PRIMEIRO PARA A PASTA DO .py!):
docker build -t flask-portal-image .
0.6) Load a imagem para o cluster:
kind load docker-image flask-portal-image --name portal-cluster
0.7) Deploy!
# Set the current context to portal-cluster
kubectl config use-context kind-portal-cluster
# Deploy the portal
kubectl apply -f portal-deployment.yaml
# Deploy the Istio configuration
kubectl apply -f istio-config.yaml
0.8) Buscar o IP do Portal para as factories saberem onde têm de se ligar!
kubectl get services portal-service -o=jsonpath='{.spec.clusterIP}'
0.9) Copiar o IP do Portal obtido e colar no 'portal_api_ip.txt' da pasta do cluster das factories

1)-Criar Cluster de Factories (Neste caso só 1 com 2 factories!)
1.1) kind create cluster --config kind-config-factory.yaml --name factory-cluster
1.2) Contruír a imagem do docker (DAR CD PRIMEIRO PARA A PASTA DO .py!):
docker build -t factory-image .
1.3) Dar load à imagem do docker:
kind load docker-image factory-image --name factory-cluster
1.4) Deploy!
# Set the current context to factory-cluster
kubectl config use-context kind-factory-cluster
# Deploy the factories
kubectl apply -f factory-deployment.yaml

2)-Verificar o bom funcionamento de tudo:
2.1) No Cluster do Portal:
kubectl config use-context kind-portal-cluster
kubectl get deployments
kubectl get services
kubectl get pods

2.2) No cluster das Fábricas:
kubectl config use-context kind-factory-cluster
kubectl get deployments
kubectl get services
kubectl get pods

3) Se tudo tiver bem e a funcionar corretamente vamos abrir o portal!
3.1) Ir ao terminal do cluster do portal e correr:
kubectl get service istio-ingressgateway -n istio-system -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}'
Para obter a nodePort
3.2) Aceder a: 'http://localhost:<NodePort>' substituindo <NodePort> pela porta obtida no passo acima!